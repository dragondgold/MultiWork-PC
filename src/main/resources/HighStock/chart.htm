<!DOCTYPE HTML>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <script type="text/javascript" src="jquery-1.11.1.min.js"></script>
	<style type="text/css">
        ${demo.css}
	</style>
<script type="text/javascript">

// Show tooltip with mouse over point
var showTooltip = true;

// This function is called when DOM is ready
$(function() {

    // Keypress detection
    $('#grad').keyup(function(event) {
        // Escape key, disable tooltip until click on point
        if(event.keyCode == 27){
            showTooltip = false;
            getChart().tooltip.hide()
        }
    });

	// Create the chart
    new Highcharts.StockChart({
		chart: {
            renderTo: "container",
			type: 'line',
			zoomType: 'x',
            animation: false,
            events: {
                load: function() {
                    alert ("(Chart Loaded Event)");
                },
                redraw: function(e){
                    alert("(Chart Redraw Event)");
                }
            }
		},

        credits: false,
        exporting: { enabled: false },

		xAxis: {
			labels: {
				formatter: function(){
                    return this.value;
				}
			},
            // True value indicates the points should be placed at fixed intervals of space in pixels,
            //  and False changes points to be placed at fixed intervals of values.
            // In an ordinal axis, the points are equally spaced in the chart regardless of the actual time or x distance between them.
            //  This means that missing data for nights or weekends will not take up space in the chart.
            ordinal: false
		},

		yAxis: {
            endOnTick: false,
            startOnTick: false,
            ceiling: 55,
            floor: 0
		},

        scrollbar: {
            liveRedraw: false
        },

		navigator: {
			xAxis: {
				labels: {
					formatter: function(){
                        return this.value + " μS";
					}
				}
			},
            series: {
                dataGrouping: {
                    approximation: 'close',
                    smoothed: true
                }
            },
			height: 70
		},

        // Tooltip showed when mouse is over points
		tooltip: {
            crosshairs: true,
            enabled: true,
            shared: true,
			formatter: function() {
                if(!showTooltip) return false;
                var s = [];

                $.each(this.points, function(i, point) {
                    s.push('<span style="color: ' + this.series.color + '">\u25CF</span>' + ' ' + point.series.name + ' : ' +
                            timeToLabel(this.x) + '<span>');
                });

                return s.join('<br>');
			}
		},

		plotOptions: {
            series: {
                turboThreshold: 0,
                dataGrouping: {
                    enabled: true,
                    groupPixelWidth: 1
                },
                events: {
                    click: function(e) {
                        showTooltip = true;
                    }
                }
            },
			line: {
				marker: {
					// Hide markers in plot (slowdown chart performance)
					enabled: false
				},
                events: {
                    // Series legend click event
                    legendItemClick: function(event){
                        if(event.browserEvent.shiftKey == true) {
                            // Create an alert containing series name and event, this is captured in the JavaFX
                            //  WebView to be used in the Java code
                            alert(this.name + "(Series Legend Shift Click) ->" + this.index + ","
                                  + event.browserEvent.x + "," + event.browserEvent.y);
                            event.preventDefault();
                        }
                    }
                }
			}
		},

        // Series legends
        legend: {
            enabled: true
        },

		rangeSelector: {
			enabled: false
		},

        title: {
            text: "Logic Analyzer"
        },

        annotationsOptions: {
            enabledButtons: true
        },

        /*
        annotations: [
            {
                title: 'test',
                anchorX: 'left',
                anchorY: 'top',
                xValue: 1,
                yValue: 1,
                shape: {
                    type: 'rect',
                    //units: 'values',
                    params: {
                        fill: 'red',
                        x: 0,
                        y: 0,
                        width: 200,
                        height: 100
                    }
                }
            },
            {
                title: 'test 2',
                anchorX: 'left',
                anchorY: 'top',
                xValue: 2,
                yValue: 2,
                shape: {
                    type: 'rect',
                    //units: 'values',
                    params: {
                        fill: 'red',
                        x: 0,
                        y: 0,
                        width: 200,
                        height: 100
                    }
                }
            }
        ],*/

        // Data and flags series
		series: [{
            //data: [[0,0], [1,1], [1.5,0.5], [2, 3], [4, 1], [8, 4]],
            data: [[0,1]],
			name: 'Channel 1',
            type: 'line',
            id: 'C1'
		}, {
            data: [[0,8]],
			name: 'Channel 2',
            type: 'line',
            id: 'C2'
		}, {
            data: [[0,15]],
			name: 'Channel 3',
            type: 'line',
            id: 'C3'
		}, {
            data: [[0,22]],
			name: 'Channel 4',
            type: 'line',
            id: 'C4'
		}, {
            data: [[0,29]],
			name: 'Channel 5',
            type: 'line',
            id: 'C5'
		}, {
            data: [[0,36]],
			name: 'Channel 6',
            type: 'line',
            id: 'C6'
		}, {
            data: [[0,43]],
			name: 'Channel 7',
            type: 'line',
            id: 'C7'
		}, {
            data: [[0,50]],
			name: 'Channel 8',
            type: 'line',
            id: 'C8'
		}] // Series

    });
});

function getXExtremes(){
    var max = getChart().xAxis[0].getExtremes().dataMax;
    var min = getChart().xAxis[0].getExtremes().dataMin;

    return [min, max];
}

function getYExtremes(){
    var max = getChart().yAxis[0].getExtremes().dataMax;
    var min = getChart().yAxis[0].getExtremes().dataMin;

    return [min, max];
}

function updateAnnotation(width, height, text, fontSize, index, titleColor, x){
    getChart().annotations.allItems[index].update(
            {
                title: {
                    text: text,
                    x: x,
                    style: {
                        fontSize: fontSize,
                        color: titleColor
                    }
                },
                shape: {
                    params:{
                        //width: Math.abs(getChart().xAxis[0].toPixels(width) - getChart().xAxis[0].toPixels(0)),
                        //height: Math.abs(getChart().yAxis[0].toPixels(height) - getChart().yAxis[0].toPixels(0))
                        width: width,
                        height: height
                    }
                }
            });
}

function clearAllSeries() {
    for (var n = 0; n < getChart().series.length; ++n) {
        getChart().series[n].setData([[0, 7*n+1 ]], false);
    }
    redrawChart();
}

function removeAllAnnotations() {
    var annotations = getChart().annotations.allItems;
    while(annotations.length > 0) annotations[0].destroy();

    getChart().redrawAnnotations();
}

function addFlag(str, xCord, seriesIndex){
    getChart().series[seriesIndex].addPoint({x: xCord, title: str});
}

function addAnnotation(annotation){
    getChart().addAnnotation(annotation);
}

function getChart(){
    return $('#container').highcharts();
}

function getXData(index) {
    return getChart().series[index].xData;
}

function setTitle(title, subtitle){
    getChart().setTitle({text: title}, {text: subtitle});
}

function redrawChart(){
    $('#container').highcharts().redraw();
}

function addData(x, y, index, redraw, shift){
    var chart = $('#container').highcharts();
    var series = chart.series[index];

    series.addPoint([x,y], redraw, shift);
}

/**
 * Compute text size for "Unica One, sans-serif" font
 */
function getTextDimension(text, fontSize){
    var font = fontSize + "pt Unica One, sans-serif";

    // re-use canvas object for better performance
    var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement("canvas"));
    var context = canvas.getContext("2d");
    context.font = font;
    var metrics = context.measureText(text);

    // The font size is the font height
    return [metrics.width, fontSize];
}

getTextWidth = function(text, font) {

};

/**
 * Converts time in seconds in the best way to show it (mS, uS or nS)
 * @param time time in micro-seconds to convert
 * @return string representation of the converted time with the corresponding unit
 */
function timeToLabel(time){

    time = time / 1000000;

    // Time > 1000uS, show it as mS
    if(time * 1E6 >= 1000){
        return (time*1E3).toFixed(2) + " mS";
    }

    // Time > 1000nS show it as uS
    else if(time * 1E9 >= 1000){
        return (time*1E6).toFixed(2) + " μS";
    }

    // Else, show it as nS
    else{
        return (time*1E9).toFixed(2) + " nS";
    }
}

</script>
<style>
    #grad {
        background: linear-gradient(to top left, rgba(62,62,64,1), rgba(42,42,43,1));
    }
</style>
</head>
<body id="grad">

<script src="Highstock-2.0.3/js/highstock.js"></script>
<script src="Highstock-2.0.3/js/modules/exporting.js"></script>
<script src="annotations-master/js/annotations.js"></script>
<script src="dark-unica.js"></script>

<div id="container" style="min-width: 310px; min-height: 630px; margin: 0"></div>
</body>
</html>
